// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241205180850_modificationDeLaconceptionUser")]
    partial class modificationDeLaconceptionUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("EstBoulevard")
                        .HasColumnType("bit");

                    b.Property<bool>("EstRue")
                        .HasColumnType("bit");

                    b.Property<string>("Lattitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RueBoulevard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Core.Models.Bangalow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProprietaireId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("ProprietaireId");

                    b.ToTable("Bangalows");
                });

            modelBuilder.Entity("Core.Models.BangalowComercial", b =>
                {
                    b.Property<int>("ComercialId")
                        .HasColumnType("int");

                    b.Property<int>("BangalowId")
                        .HasColumnType("int");

                    b.Property<int>("CommercialId")
                        .HasColumnType("int");

                    b.HasKey("ComercialId", "BangalowId");

                    b.HasIndex("BangalowId");

                    b.HasIndex("CommercialId");

                    b.ToTable("BangalowComercials");
                });

            modelBuilder.Entity("Core.Models.Comodite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Comodite");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5120),
                            Libelle = "Vue En Mer",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5163)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5168),
                            Libelle = "Jardin",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5169)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5170),
                            Libelle = "Lit Enfant",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5171)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5173),
                            Libelle = "Frigo",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5174)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5176),
                            Libelle = "Picsine",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5177)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5178),
                            Libelle = "Place parking",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5179)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5181),
                            Libelle = "Console de jeux vidéo",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5182)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5184),
                            Libelle = "jacuzzi Spa",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5185)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5186),
                            Libelle = "Wifi",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5187)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5189),
                            Libelle = "Systéme de son-surround",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5190)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5191),
                            Libelle = "DVD et Livres",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5193)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5194),
                            Libelle = "Netflix",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5195)
                        });
                });

            modelBuilder.Entity("Core.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BangalowId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstCIN")
                        .HasColumnType("bit");

                    b.Property<bool?>("EstCINRecto")
                        .HasColumnType("bit");

                    b.Property<bool?>("EstCINVerso")
                        .HasColumnType("bit");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UrlPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BangalowId");

                    b.HasIndex("ClientId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Core.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BangalowId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HeureEntree")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeureSortie")
                        .HasColumnType("time");

                    b.Property<double>("NbrJours")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BangalowId");

                    b.HasIndex("ClientId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Admin",
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5489),
                            Description = "Administrateur",
                            Libelle = "Admin",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5492)
                        },
                        new
                        {
                            Id = 2,
                            Code = "Client",
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5495),
                            Description = "Client ou locataire d'un bangalow",
                            Libelle = "Client",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5496)
                        },
                        new
                        {
                            Id = 3,
                            Code = "Commercial",
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5498),
                            Description = "Responsable sur la location d'une ou plusieurs bangalows",
                            Libelle = "Commercial",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5499)
                        },
                        new
                        {
                            Id = 4,
                            Code = "Proprietaire",
                            CreatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5501),
                            Description = "Proprietaire d'un ou plusieurs bangalows",
                            Libelle = "Proprietaire",
                            UpdatedAt = new DateTime(2024, 12, 5, 19, 8, 48, 878, DateTimeKind.Local).AddTicks(5502)
                        });
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CryptedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Core.Models.Admin", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<string>("Tel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Core.Models.Commercial", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<string>("NumeroWhatsApp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Commercial");
                });

            modelBuilder.Entity("Core.Models.Proprietaire", b =>
                {
                    b.HasBaseType("Core.Models.User");

                    b.Property<string>("NumeroWhatsApp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Proprietaire");
                });

            modelBuilder.Entity("Core.Models.Bangalow", b =>
                {
                    b.HasOne("Core.Models.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Proprietaire", "Proprietaire")
                        .WithMany("Bangalows")
                        .HasForeignKey("ProprietaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Proprietaire");
                });

            modelBuilder.Entity("Core.Models.BangalowComercial", b =>
                {
                    b.HasOne("Core.Models.Bangalow", "Bangalow")
                        .WithMany("BangalowComercials")
                        .HasForeignKey("BangalowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Models.Commercial", "Commercial")
                        .WithMany("BangalowComercial")
                        .HasForeignKey("CommercialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bangalow");

                    b.Navigation("Commercial");
                });

            modelBuilder.Entity("Core.Models.Photo", b =>
                {
                    b.HasOne("Core.Models.Bangalow", "Bangalow")
                        .WithMany("Photos")
                        .HasForeignKey("BangalowId");

                    b.HasOne("Core.Models.Client", "Client")
                        .WithMany("CINPhotos")
                        .HasForeignKey("ClientId");

                    b.Navigation("Bangalow");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Models.Reservation", b =>
                {
                    b.HasOne("Core.Models.Bangalow", "Bangalow")
                        .WithMany("Reservations")
                        .HasForeignKey("BangalowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Models.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bangalow");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.HasOne("Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Models.Admin", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Core.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Core.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Commercial", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Core.Models.Commercial", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Proprietaire", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Core.Models.Proprietaire", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Bangalow", b =>
                {
                    b.Navigation("BangalowComercials");

                    b.Navigation("Photos");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.Navigation("CINPhotos");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Core.Models.Commercial", b =>
                {
                    b.Navigation("BangalowComercial");
                });

            modelBuilder.Entity("Core.Models.Proprietaire", b =>
                {
                    b.Navigation("Bangalows");
                });
#pragma warning restore 612, 618
        }
    }
}
